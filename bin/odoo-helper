#!/bin/bash

# Use odoo-helper --help for a documentation


SCRIPT=$0;
SCRIPT_NAME=`basename $SCRIPT`;
F=`readlink -f $SCRIPT`;  # full script path;
WORKDIR=`pwd`;

# load basic conf
if [ -f "/etc/odoo-helper.conf" ]; then
    source "/etc/odoo-helper.conf";
fi
if [ -f "$HOME/odoo-helper.conf" ]; then
    source "$HOME/odoo-helper.conf";
fi
# -----------

set -e;  # Fail on errors


if [ -z $ODOO_HELPER_LIB ]; then
    echo "Odoo-helper-scripts seems not been installed correctly.";
    echo "Reinstall it (see Readme on https://github.com/katyukha/odoo-helper-scripts/)";
    exit 1;
fi

# Load common functions
source $ODOO_HELPER_LIB/common.bash; 

ohelper_require fetch;
ohelper_require server;
ohelper_require db;
ohelper_require 'test';
ohelper_require addons;
# ----------------------------------------------------------------------------------------

function print_usage {
    echo "
    Odoo helper script collection

    Version: $ODOO_HELPER_VERSION

    Usage:
        $SCRIPT_NAME [global options] command [command options]

    Current project settings:
        Project dir: ${PROJECT_ROOT_DIR:-'No project found'};
        Branch:      ${ODOO_BRANCH:-'Not defined'}

    Available commands:
        fetch [--help]                           - fetch and install odoo addon
        link [--help]                            - link module to custom_addons dir
        generate_requirements [addons dir]       - parse addons dir, find all addons that are
                                                   git repositories and print odoo-requirements.txt content
                                                   file content suitable for *fetch* subcommand.
                                                   for example:
                                                       $SCRIPT_NAME generate_requirements > odoo_requirements.txt
                                                   and you can use generated file for fetch subcommand:
                                                       $SCRIPT_NAME fetch --requirements odoo_requirements.txt
        update_odoo                              - update odoo source code
        server [--help]                          - manage local odoo server (run, start, stop, etc)
        addons [--help]                          - addons related helpers
        odoo-py [args]                           - run project-specific odoo.py script
        test [--help]                            - test addon
        create_db <db_name> [cofig file to use]  - create odoo database in current odoo project
        drop_db <db_name> [cofig file to use]    - drop odoo database in current odoo project
        list_db [config file to use]             - list databases available for current odoo instance
        print_config                             - print current configuration
        help | --help | -h                       - display this help message
    
    Global options:
        --addons-dir <addons_directory>
        --downloads-dir <downloads_directory>
        --virtual-env <virtual_env_dir>       - optional, if specified, python dependencies
                                                will be installed in that virtual env
        --use-copy                            - if set, then downloaded modules, repositories will
                                                be copied instead of being symlinked
        --use-unbuffer                        - if set, then 'unbuffer' command from 'expect' package will be used
                                                otherwise standard 'exec' will be used to run odoo server
                                                this helps to make odoo server think that it runs in terminal thus
                                                it provides colored output.
        --verbose|--vv                        - show extra output

    Also global options may be set up using configuration files.
    Folowing file paths will be searched for file $CONF_FILE_NAME:
        - /etc/default/$CONF_FILE_NAME  - Default conf. there may be some general settings placed
        - $HOME/$CONF_FILE_NAME         - User specific oconf  (overwrites previous conf)
        - Project specific conf         - File $CONF_FILE_NAME will be searched in $WORKDIR and all parent
                                          directories. First one found will be used

    Configuration files are simple bash scripts that sets environment variables

    Available environment variables:
        DOWNLOADS_DIR                   - Directory where all downloads hould be placed
        ADDONS_DIR                      - directory to place addons fetched (thats one in odoo's addons_path)
        VENV_DIR                        - Directory of virtual environment, if virtualenv is used
                                          Note, that if VENV_DIR not set, than system will think that odoo is installed system-wide.
        USE_COPY                        - If set, then addons will be coppied in addons dir, instead of standard symlinking
        ODOO_BRANCH                     - used in run_server command to decide how to run it
        ODOO_TEST_CONF_FILE             - used to run tests. this configuration file will be used for it
";
}


# generate_requirements [addons path]
# prints odoo-requirements file content (only addons which are git repositories)
function generate_requirements {
    local req_addons_dir=${1:-$ADDONS_DIR};
    local cdir=`pwd`;

    for repo in $(addons_list_repositories $req_addons_dir); do
        cd $repo;
        local fetch_line="-r `get_git_remote_url` -b `get_git_branch_name`";
        echo "$fetch_line";
        cd $cdir;
    done
}

# downoload latest odoo of this version and reinstall it
function update_odoo_sources {
    echo -e "${LBLUEC}Updating odoo sources...${NC}";
    local FILE_SUFFIX=`date -I`.`random_string 4`;
    local BACKUP_PATH=$BACKUP_DIR/odoo.sources.$ODOO_BRANCH.$FILE_SUFFIX.tar.gz
    
    (cd $ODOO_PATH/.. && tar -czf $BACKUP_PATH `basename $ODOO_PATH`);
    echo -e "${LBLUEC}Odoo sources backup saved at:${NC} $BACKUP_PATH";

    if [ -d "$ODOO_PATH/.git" ]; then
        echo -e "${LBLUEC}Odoo source seems to be git repository. Attemt to update...${NC}";
        (cd $ODOO_PATH && git pull);
    else
        echo -e "${LBLUEC}Downloading new sources archive...${NC}"
        local ODOO_ARCHIVE=$DOWNLOADS_DIR/odoo.$ODOO_BRANCH.$FILE_SUFFIX.tar.gz
        wget -q -O $ODOO_ARCHIVE https://github.com/odoo/odoo/archive/$ODOO_BRANCH.tar.gz;
        rm -r $ODOO_PATH;
        (cd $DOWNLOADS_DIR && tar -zxf $ODOO_ARCHIVE && mv odoo-$ODOO_BRANCH $ODOO_PATH);
    fi

    echo -e "${LBLUEC}Reinstalling odoo...${NC}";
    (cd $ODOO_PATH && execu python setup.py develop);
    echo -e "${GREENC}Odoo sources update finished!${NC}";
}

# function that parses commandline arguments and executes commands
function odoo_helper_main {
    # load configuration files at startup
    load_project_conf;

    # Parse command line options and run commands
    if [[ $# -lt 1 ]]; then
        echo "No options/commands supplied $#: $@";
        print_usage;
        exit 0;
    fi

    while [[ $# -gt 0 ]]
    do
        key="$1";
        case $key in
            -h|--help|help)
                print_usage;
                exit 0;
            ;;
            --downloads-dir)
                DOWNLOADS_DIR=$2;
                shift;
            ;;
            --addons-dir)
                ADDONS_DIR=$2;
                shift;
            ;;
            --virtual-env)
                VENV_DIR=$2;
                shift;
            ;;
            --use-copy)
                USE_COPY=1;
            ;;
            --use-unbuffer)
                USE_UNBUFFER=1;
            ;;
            --verbose|-vv)
                VERBOSE=1;
            ;;
            fetch)
                shift;
                fetch_module "$@";
                exit
            ;;
            generate_requirements)
                shift;
                generate_requirements "$@"
                exit;
            ;;
            update_odoo)
                shift;
                update_odoo_sources;
                exit;
            ;;
            link|link_module)
                shift;
                link_module "$@"
                exit;
            ;;
            server)
                shift;
                server "$@";
                exit;
            ;;
            addons)
                shift;
                addons_command "$@";
                exit;
            ;;
            odoo-py)
                shift;
                odoo_py "$@";
                exit;
            ;;
            test)
                shift;
                test_module "$@";
                exit;
            ;;
            create_db)
                shift;
                odoo_create_db "$@";
                exit;
            ;;
            drop_db)
                shift;
                odoo_drop_db "$@";
                exit;
            ;;
            list_db)
                shift;
                odoo_list_db "$@";
                exit;
            ;;
            print_config)
                shift;
                print_helper_config;
                exit;
            ;;
            *)
                echo "Unknown option global option /command $key";
                exit 1;
            ;;
        esac;
        shift;
    done;
}

odoo_helper_main "$@";

