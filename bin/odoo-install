#!/bin/bash

# Odoo install helper script

SCRIPT=$0;
SCRIPT_NAME=`basename $SCRIPT`;
F=`readlink -f $SCRIPT`;  # full script path;
WORKDIR=`pwd`;


# load basic conf
if [ -f "/etc/odoo-helper.conf" ]; then
    source "/etc/odoo-helper.conf";
fi
if [ -f "$HOME/odoo-helper.conf" ]; then
    source "$HOME/odoo-helper.conf";
fi
# -----------

set -e;  # Fail on errors


if [ -z $ODOO_HELPER_LIB ]; then
    echo "Odoo-helper-scripts seems not been installed correctly.";
    echo "Reinstall it (see Readme on https://github.com/katyukha/odoo-helper-scripts/)";
    exit 1;
fi

# Load common functions
source $ODOO_HELPER_LIB/common.bash; 

# Require libs
ohelper_require 'install'
# ----------------------------------------------------------------------------------------


declare -A CONF_OPTIONS;
declare -A TEST_CONF_OPTIONS;

function print_usage {
    echo "Bash script to instal dev version of Odoo in local environment

    Optionaly system dependencies could be installed too (Debian only systems)

    Script version: $ODOO_HELPER_VERSION

    Usage:
         bash $SCRIPT_NAME [options]

    Environment variables used:
         ODOO_BRANCH         - allow to clone specified branch. Current val is $ODOO_BRANCH
         ODOO_DOWNLOAD_ARCHIVE - (on|off) if on then only archive will be downloaded
                                 not clonned. Current value is '$DOWNLOAD_ARCHIVE'
         ODOO_DBHOST         - allow to specify Postgresql's server host.
                               Current value: $DB_HOST
         ODOO_DBUSER         - allow to specify user to connect to DB as.
                               Current value: $DB_USER
         ODOO_DBPASSWORD     - allow to specify db password to connect to DB as.
                               Current value: $DB_PASSWORD

    Available options:
         -i|--install-dir <dir>        - directory to install odoo in. default: $PROJECT_ROOT_DIR
         --odoo-repo <git repo>        - git repository to get Odoo from. default: $ODOO_REPO
                                         Used only if *download-archive* set to *off*
         --odoo-version <odoo version> - odoo version to install. default: $ODOO_VERSION
         -b|--branch <branch>          - specify odoo branch to install. default: $ODOO_BRANCH
                                         Normaly it is same as odoo version, but if You want to install odoo
                                         from diferent branch, use this option.
         --download-archive on|off     - if on, then odoo will be downloaded as archive. it is faster
                                         if You want to clone Odoo repository set this option to 'off'
                                         Default: $DOWNLOAD_ARCHIVE
         --single-branch               - if on, then odoo will clone only single branch,
                                         which will speed-up install process.
                                         This option is used only if --download-archive is 'off'
                                         Default: $CLONE_SINGLE_BRANCH
         --db-host <host>              - database host to be used in settings. default: $DB_HOST
         --db-user <user>              - database user to be used in settings. default: $DB_USER
         --db-pass <password>          - database password to be used in settings. default: odoo
         -y                            - Answer yes on any question. (used in apt-get commands
                                         when --install-sys-deps option supplied.)

         --conf-opt-<option_name>      - rewrite configuration option. Ex: '--conf-opt-xml_rpc_port 9999'
         --test-conf-opt-<option_name> - rewrite test configuration option Ex: '--conf-opt-xml_rpc_port 9998'
         --verbose|--vv                - show extra output

    Prerequirements:
         Next packages must be installed system-wide
         (or use --sys-deps option to install them during installation process):
             - virtualenv
             - postgresql-client
             - python-dev
             - g++
             - libpq-dev
             - git

    After instalation configs will be generated in 'conf' directory
    Also 'log' directory will contain Odoo logs

    Note that, it is safe enough to run this script second time with same or similar args
    if it breaks somehow. It will automaticaly detect if odoo sources were downloaded or
    virtual environment created and will not do this operations second time.
    So for example if you use option --sys-deps and some dependencies cannot be installed
    you can install them manualy and retry this script with or without thi option and You will not
    wast time waiting odoo sources to be downloaded again.

    For bug reports use github issues: https://github.com/katyukha/odoo-helper-scripts/issues
    ";
}

function parse_options {
    if [[ $# -lt 1 ]]; then
        echo "No options supplied $#: $@";
        print_usage;
        exit 0;
    fi

    while [[ $# -gt 0 ]]
    do
        local key="$1";
        case $key in
            --install-dir|-i)
                PROJECT_ROOT_DIR=`readlink -f $2`;
                shift;
            ;;
            --odoo-repo)
                ODOO_REPO=$2;
                shift;
            ;;
            --odoo-version)
                ODOO_VERSION=$2;
                shift;
            ;;
            --branch|-b)
                ODOO_BRANCH=$2;
                shift;
            ;;
            --download-archive)
                DOWNLOAD_ARCHIVE=$2;
                shift;
            ;;
            --single-branch)
                CLONE_SINGLE_BRANCH=$2;
                shift;
            ;;
            --db-host)
                DB_HOST=$2;
                shift;
            ;;
            --db-user)
                DB_USER=$2;
                shift;
            ;;
            --db-pass)
                DB_PASSWORD=$2;
                shift;
            ;;
            -y)
                ALWAYS_ANSWER_YES=1;
            ;;
            --verbose|-vv)
                VERBOSE=1;
            ;;
            --conf-opt-*)
                local opt_name="${key#--conf-opt-}"
                CONF_OPTIONS[$opt_name]=$2;
                shift;
            ;;
            --test-conf-opt-*)
                local opt_name="${key#--test-conf-opt-}"
                TEST_CONF_OPTIONS[$opt_name]=$2;
                shift;
            ;;
            -h|--help|help)
                # Check environment for config
                install_preconfigure_env;

                print_usage;
                exit 0;
            ;;
            *)
                echo "Unknown option global option /command $key";
                exit 1;
            ;;
        esac
        shift
    done
}

function install_odoo {
    local save_dir=`pwd`;
    cd "$PROJECT_ROOT_DIR";

    # if not installed odoo, install it
    if [ ! -d $ODOO_PATH ]; then
        if [ "$DOWNLOAD_ARCHIVE" == "on" ]; then
            echoe -e "${BLUEC}Downloading odoo...${NC}";
            install_download_odoo;
        else
            echoe -e "${BLUEC}Clonning odoo...${NC}";
            install_clone_odoo;
        fi
    fi

    # Install virtual environment
    echoe -e "${BLUEC}Installing virtualenv...${NC}";
    install_virtual_env;

    # Install python requirements
    echoe -e "${BLUEC}Installing python pre-requirements...${NC}";
    install_python_prerequirements;

    # Run setup.py with gevent workaround applied.
    echoe -e "${BLUEC}Installing odoo...${NC}";
    odoo_run_setup_py;  # imported from 'install' module

    # restore curenct working dir
    cd $save_dir;
}

function generate_conf {
    # Generate configuration
    local -A ODOO_CONF_OPTIONS;

    for key in ${!CONF_OPTIONS[@]}; do
        ODOO_CONF_OPTIONS[$key]=${CONF_OPTIONS[$key]};
    done

    # Add default values
    ODOO_CONF_OPTIONS[db_host]="${ODOO_CONF_OPTIONS['db_host']:-$DB_HOST}";
    ODOO_CONF_OPTIONS[db_port]="${ODOO_CONF_OPTIONS['db_port']:-False}";
    ODOO_CONF_OPTIONS[db_user]="${ODOO_CONF_OPTIONS['db_user']:-$DB_USER}";
    ODOO_CONF_OPTIONS[db_password]="${ODOO_CONF_OPTIONS['db_password']:-$DB_PASSWORD}";

    # Generate conf
    install_generate_odoo_conf $ODOO_CONF_FILE;  # imported from 'install' module
}

function generate_test_conf {
    # Generate test configuration configuration
    local -A ODOO_CONF_OPTIONS;

    for key in ${!TEST_CONF_OPTIONS[@]}; do
        ODOO_CONF_OPTIONS[$key]=${TEST_CONF_OPTIONS[$key]};
    done

    # Add default values
    ODOO_CONF_OPTIONS[logfile]="${ODOO_CONF_OPTIONS['logfile']:-False}";
    ODOO_CONF_OPTIONS[pidfile]="${ODOO_CONF_OPTIONS['pidfile']:-$PROJECT_ROOT_DIR/odoo.test.pid}";
    ODOO_CONF_OPTIONS[db_host]="${ODOO_CONF_OPTIONS['db_host']:-$DB_HOST}";
    ODOO_CONF_OPTIONS[db_port]="${ODOO_CONF_OPTIONS['db_port']:-False}";
    ODOO_CONF_OPTIONS[db_user]="${ODOO_CONF_OPTIONS['db_user']:-$DB_USER}";
    ODOO_CONF_OPTIONS[db_password]="${ODOO_CONF_OPTIONS['db_password']:-$DB_PASSWORD}";
    ODOO_CONF_OPTIONS[db_name]="${ODOO_CONF_OPTIONS['db_name']:-$DB_USER-odoo-test}";
    ODOO_CONF_OPTIONS[db_filter]="${ODOO_CONF_OPTIONS['db_filter']:-$DB_USER-odoo-test}";
    ODOO_CONF_OPTIONS[xmlrpc_port]="${ODOO_CONF_OPTIONS['xmlrpc_port']:-8269}";
    ODOO_CONF_OPTIONS[xmlrpcs_port]="${ODOO_CONF_OPTIONS['xmlrpcs_port']:-8271}";
    ODOO_CONF_OPTIONS[longpolling_port]="${ODOO_CONF_OPTIONS['longpolling_port']:-8272}";

    # Generate conf
    install_generate_odoo_conf $ODOO_TEST_CONF_FILE;   # imported from 'install' module
}

#------------------------------------------------------------------------
# Install Odoo
#------------------------------------------------------------------------

# Install process
parse_options $@;

# Check environment to get values not provided via command line args
install_preconfigure_env;

# Directory and file paths
PROJECT_ROOT_DIR=${PROJECT_ROOT_DIR:-$WORKDIR/odoo-$ODOO_BRANCH};
PROJECT_CONFIG_VERSION=$ODOO_HELPER_CONFIG_VERSION;
config_set_defaults;  # imported from common module

install_create_project_dir_tree;  # imported from 'install' module

# install odoo
install_odoo; 

# Generate and save odoo-helper project conf
echo -e "${BLUEC}Generating configurations...${NC}";
echo "$(config_print)" > $PROJECT_ROOT_DIR/$CONF_FILE_NAME;
generate_conf;
generate_test_conf;
#---------------------------------------------

echo -e "${GREENC}Odoo seems to be successfully installed!${NC}";
echo -e "Edit configuration at ${BLUEC}$ODOO_CONF_FILE${NC}";
echo -e "Use ${YELLOWC}odoo-helper${NC} project to manage this odoo instance";
